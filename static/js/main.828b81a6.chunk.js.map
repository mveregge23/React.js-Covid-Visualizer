{"version":3,"sources":["logo.svg","styles/MapMarkerStyle.js","components/MapMarker.js","styles/MapSettingsStyle.js","components/MapSettings.js","components/Map.js","bootstrapURLkey.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","mapMarkerStyle","position","width","height","left","top","border","borderRadius","backgroundColor","textAlign","lineHeight","color","fontSize","fontWeight","padding","MapMarker","style","this","props","text","React","Component","mapSettingsStyle","zIndex","MapSettings","value","currentCountry","onChange","handleCountryChange","Object","keys","countries","map","countryCode","key","Map","state","covidData","heatmapData","positions","options","dissipating","radius","opacity","center","lat","lng","zoom","bind","event","setState","target","centroids","centroidJson","reduce","obj","centroid","dataReducer","data","name","totalConfirmed","totalDeaths","totalRecovered","fetch","then","formattedData","json","push","code","weight","bootstrapURLKeys","language","heatmapLibrary","heatmap","defaultCenter","defaultZoom","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.828b81a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const M_WIDTH = 40;\r\nconst M_HEIGHT = 40;\r\n\r\nconst mapMarkerStyle = {\r\n  position: \"absolute\",\r\n  width: M_WIDTH,\r\n  height: M_HEIGHT,\r\n  left: -M_WIDTH / 2,\r\n  top: -M_HEIGHT / 2,\r\n\r\n  border: \"5px solid red\",\r\n  borderRadius: M_HEIGHT,\r\n  backgroundColor: \"white\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"2.5\",\r\n  color: \"#3f51b5\",\r\n  fontSize: 16,\r\n  fontWeight: \"bold\",\r\n  padding: 4,\r\n};\r\n\r\nexport { mapMarkerStyle };\r\n","import React from \"react\";\r\nimport { mapMarkerStyle } from \"../styles/MapMarkerStyle.js\";\r\n\r\nclass MapMarker extends React.Component {\r\n  render() {\r\n    return <div style={mapMarkerStyle}>{this.props.text}</div>;\r\n  }\r\n}\r\nexport default MapMarker;\r\n","const mapSettingsStyle = {\r\n  zIndex: 1,\r\n  position: \"absolute\",\r\n};\r\n\r\nexport { mapSettingsStyle };\r\n","import React from \"react\";\r\nimport { mapSettingsStyle } from \"../styles/MapSettingsStyle.js\";\r\n\r\nclass MapSettings extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <select\r\n          value={this.props.currentCountry}\r\n          onChange={this.props.handleCountryChange}\r\n          style={mapSettingsStyle}\r\n        >\r\n          {Object.keys(this.props.countries).map((countryCode) => {\r\n            return (\r\n              <option value={countryCode} key={countryCode}>\r\n                {this.props.countries[countryCode][\"name\"]}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapSettings;\r\n","import React from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport MapMarker from \"./MapMarker.js\";\r\nimport MapSettings from \"./MapSettings.js\";\r\nimport { bootstrapURLkey } from \"../bootstrapURLkey.js\";\r\nimport centroidJson from \"../content/centroids.json\";\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      covidData: {},\r\n      heatmapData: {\r\n        positions: [],\r\n        options: { dissipating: true, radius: 100, opacity: 0.7 },\r\n      },\r\n      currentCountry: \"\",\r\n      center: { lat: 0, lng: 0 },\r\n      zoom: 0,\r\n    };\r\n    this.handleCountryChange = this.handleCountryChange.bind(this);\r\n  }\r\n\r\n  handleCountryChange(event) {\r\n    this.setState({ currentCountry: event.target.value });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const centroidReducer = (obj, centroid) => {\r\n      obj[centroid[\"country\"]] = {\r\n        lat: centroid[\"latitude\"],\r\n        lng: centroid[\"longitude\"],\r\n      };\r\n      return obj;\r\n    };\r\n    const centroids = centroidJson.reduce(centroidReducer, {});\r\n\r\n    const dataReducer = (obj, data) => {\r\n      obj[data[\"CountryCode\"]] = {\r\n        name: data[\"Country\"],\r\n        totalConfirmed: data[\"TotalConfirmed\"],\r\n        totalDeaths: data[\"TotalDeaths\"],\r\n        totalRecovered: data[\"TotalRecovered\"],\r\n      };\r\n\r\n      return obj;\r\n    };\r\n\r\n    fetch(\"https://api.covid19api.com/summary\").then((data) => {\r\n      let formattedData,\r\n        heatmapData = { positions: [] };\r\n      data.json().then((json) => {\r\n        formattedData = json[\"Countries\"].reduce(dataReducer, {});\r\n        for (var countryCode in formattedData) {\r\n          if (!(typeof centroids[countryCode] === \"undefined\")) {\r\n            formattedData[countryCode][\"centroid\"] = centroids[countryCode];\r\n          } else {\r\n            delete formattedData[countryCode];\r\n          }\r\n        }\r\n        for (var countryCode in formattedData) {\r\n          heatmapData[\"positions\"].push({\r\n            code: countryCode,\r\n            lat: formattedData[countryCode][\"centroid\"][\"lat\"],\r\n            lng: formattedData[countryCode][\"centroid\"][\"lng\"],\r\n            weight: formattedData[countryCode][\"totalConfirmed\"],\r\n          });\r\n        }\r\n        this.setState((state, props) => ({\r\n          covidData: formattedData,\r\n          heatmapData: heatmapData, //{positions: [{ lat: 42.546245, lng: 1.601554, weight: 1 }]},\r\n        }));\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <MapSettings\r\n          countries={this.state.covidData}\r\n          currentCountry={this.state.currentCountry}\r\n          handleCountryChange={this.handleCountryChange}\r\n        />\r\n        <GoogleMapReact\r\n          style={{ height: \"100vh\", width: \"100vh\" }}\r\n          bootstrapURLKeys={{\r\n            key: bootstrapURLkey,\r\n            language: \"en\",\r\n          }}\r\n          heatmapLibrary={true}\r\n          heatmap={this.state.heatmapData}\r\n          defaultCenter={this.state.center}\r\n          defaultZoom={this.state.zoom}\r\n        >\r\n          <MapMarker {...this.props.center} text=\"100\" />\r\n        </GoogleMapReact>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","var bootstrapURLkey = \"AIzaSyA3Z8Fn6i92Iy8FaYbPAfkOcXrU41aN7zo\";\r\n\r\nexport { bootstrapURLkey };\r\n","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../styles/App.css\";\r\nimport Map from \"./Map.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}