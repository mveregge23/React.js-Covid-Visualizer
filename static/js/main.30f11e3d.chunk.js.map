{"version":3,"sources":["styles/MapSettingsStyle.js","components/MapSettings.js","styles/CountryDetailsStyle.js","components/CountryDetails.js","utilities/reducers.js","utilities/dataFormatters.js","utilities/getBounds.js","components/Map.js","components/App.js","serviceWorker.js","index.js"],"names":["mapSettingsStyle","zIndex","position","margin","marginTop","MapSettings","value","this","props","currentCountry","onChange","handleCountryChange","style","Object","keys","countries","map","countryCode","key","React","Component","countryDetailsStyle","width","backgroundColor","opacity","borderRadius","padding","top","left","detailsContainer","height","listStyle","textAlign","CountryDetails","data","name","totalConfirmed","totalDeaths","totalRecovered","dataReducer","obj","slug","centroidReducer","centroid","lat","lng","getFormattedSummary","json","centroids","centroidJson","reduce","reducers","formattedData","getCountryHeatmap","heatmapData","positions","forEach","dataPoint","push","weight","getBounds","maps","bounds","LatLngBounds","i","length","extend","LatLng","Map","state","apiIsLoading","couldNotConnectToApi","covidSummaryData","countryDetails","heatmapOptions","options","dissipating","radius","fetch","then","summaryData","df","setHeatmapData","forceUpdate","catch","staticSummaryData","bind","handleApiLoaded","setOptions","maxZoom","event","setState","target","code","country","countryData","fitBounds","moment","subtract","format","alert","disclaimer","color","active","text","spinner","styles","wrapper","heatmapLibrary","heatmap","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","defaultCenter","defaultZoom","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.30f11e3d.chunk.js","sourcesContent":["const mapSettingsStyle = {\r\n  zIndex: 1,\r\n  position: \"relative\",\r\n  margin: \"auto\",\r\n  marginTop: \"20px\",\r\n};\r\n\r\nexport { mapSettingsStyle };\r\n","import React from \"react\";\r\nimport { mapSettingsStyle } from \"../styles/MapSettingsStyle.js\";\r\n\r\n/* MapSettings is a component used to manage the list of available\r\n   countries for which country-specific data can be loaded. Map\r\n   passes the current country, an onChange handler, and the list\r\n   of available countries through props. */\r\nclass MapSettings extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <select\r\n          value={this.props.currentCountry}\r\n          onChange={this.props.handleCountryChange}\r\n          style={mapSettingsStyle}\r\n        >\r\n          <option value=\"\">- Select a Country -</option>\r\n          {Object.keys(this.props.countries).map((countryCode) => {\r\n            return (\r\n              <option value={countryCode} key={countryCode}>\r\n                {this.props.countries[countryCode][\"name\"]}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapSettings;\r\n","const countryDetailsStyle = {\r\n  width: \"300px\",\r\n  backgroundColor: \"gray\",\r\n  opacity: 0.95,\r\n  borderRadius: \"50px\",\r\n  padding: \"10px\",\r\n  position: \"absolute\",\r\n  top: \"40px\",\r\n  left: \"40px\",\r\n};\r\n\r\nconst detailsContainer = {\r\n  width: \"80%\",\r\n  height: \"80%\",\r\n  margin: \"auto\",\r\n};\r\n\r\nconst listStyle = {\r\n  textAlign: \"left\",\r\n};\r\n\r\nexport { countryDetailsStyle, detailsContainer, listStyle };\r\n","import React from \"react\";\r\nimport {\r\n  countryDetailsStyle,\r\n  listStyle,\r\n  detailsContainer,\r\n} from \"../styles/CountryDetailsStyle\";\r\n\r\n/* CountryDetails is a component that displays the number\r\n   of confirmed cases, number of deaths, and number of\r\n   recoveries (all passed through props) for a specific country */\r\nfunction CountryDetails(props) {\r\n  return (\r\n    <div style={countryDetailsStyle}>\r\n      <div style={detailsContainer}>\r\n        <h4>{props.data.name}</h4>\r\n        <div style={listStyle}>\r\n          <ul>\r\n            <li>Confirmed Cases: {props.data.totalConfirmed}</li>\r\n            <li>Deaths: {props.data.totalDeaths}</li>\r\n            <li>Recoveries: {props.data.totalRecovered}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","const dataReducer = (obj, data) => {\r\n  obj[data[\"CountryCode\"]] = {\r\n    slug: data[\"Slug\"],\r\n    name: data[\"Country\"],\r\n    totalConfirmed: data[\"TotalConfirmed\"],\r\n    totalDeaths: data[\"TotalDeaths\"],\r\n    totalRecovered: data[\"TotalRecovered\"],\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nconst centroidReducer = (obj, centroid) => {\r\n  obj[centroid[\"country\"]] = {\r\n    lat: centroid[\"latitude\"],\r\n    lng: centroid[\"longitude\"],\r\n  };\r\n  return obj;\r\n};\r\n\r\nexport { dataReducer, centroidReducer };\r\n","import * as reducers from \"./reducers\";\r\nimport centroidJson from \"../content/centroids.json\";\r\n\r\nfunction getFormattedSummary(json) {\r\n  const centroids = centroidJson.reduce(reducers.centroidReducer, {});\r\n  let formattedData = json[\"Countries\"].reduce(reducers.dataReducer, {});\r\n  for (var countryCode in formattedData) {\r\n    if (typeof centroids[countryCode] !== \"undefined\") {\r\n      formattedData[countryCode][\"centroid\"] = centroids[countryCode];\r\n    } else {\r\n      delete formattedData[countryCode];\r\n    }\r\n  }\r\n  return formattedData;\r\n}\r\n\r\nfunction getWorldHeatmap(data) {\r\n  let heatmapData = { positions: [] };\r\n  for (let countryCode in data) {\r\n    heatmapData[\"positions\"].push({\r\n      code: countryCode,\r\n      lat: data[countryCode][\"centroid\"][\"lat\"],\r\n      lng: data[countryCode][\"centroid\"][\"lng\"],\r\n      weight: data[countryCode][\"totalConfirmed\"],\r\n    });\r\n  }\r\n  return heatmapData;\r\n}\r\n\r\nfunction getCountryHeatmap(json) {\r\n  let heatmapData = {\r\n    positions: [],\r\n  };\r\n  json.forEach((dataPoint) => {\r\n    if (dataPoint[\"Cases\"] > 0) {\r\n      heatmapData[\"positions\"].push({\r\n        lat: dataPoint[\"Lat\"],\r\n        lng: dataPoint[\"Lon\"],\r\n        weight: dataPoint[\"Cases\"],\r\n      });\r\n    }\r\n  });\r\n  return heatmapData;\r\n}\r\n\r\nexport { getFormattedSummary, getWorldHeatmap, getCountryHeatmap };\r\n","function getBounds(maps, heatmapData) {\r\n  let bounds = new maps.LatLngBounds();\r\n  for (let i = 0; i < heatmapData[\"positions\"].length; i++) {\r\n    bounds.extend(\r\n      new maps.LatLng(\r\n        heatmapData[\"positions\"][i][\"lat\"],\r\n        heatmapData[\"positions\"][i][\"lng\"]\r\n      )\r\n    );\r\n  }\r\n  return bounds;\r\n}\r\n\r\nexport default getBounds;\r\n","import React from \"react\";\r\nimport GoogleMap from \"google-map-react\";\r\nimport MapSettings from \"./MapSettings.js\";\r\nimport CountryDetails from \"./CountryDetails.js\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport moment from \"moment\";\r\nimport * as df from \"../utilities/dataFormatters\";\r\nimport getBounds from \"../utilities/getBounds\";\r\nimport staticSummaryData from \"../content/summaryData.json\";\r\nimport countryData from \"../content/countryData.json\";\r\n\r\n/* Map is the parent component of the app that contains most of\r\n   the state used to manage it. There are functions to handle\r\n   changes to the country drop-down and manage the heat map */\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiIsLoading: true, // used to manage rendering while waiting for response from API\r\n      couldNotConnectToApi: false, // used to determine if app should use static data or not\r\n      covidSummaryData: null, // generic summary data for every country\r\n      heatmapData: null, // heatmap data for the map\r\n      currentCountry: \"\", // country selected in the drop-down\r\n      countryDetails: null, // details of the country selected in the drop-down\r\n    };\r\n\r\n    // options used to render the heatmap in the google maps interface\r\n    this.heatmapOptions = {\r\n      options: { dissipating: true, radius: 50, opacity: 0.7 },\r\n    };\r\n\r\n    /* fetching the generic summary data for all countries used to render \r\n       worldwide heatmap */\r\n    fetch(\"https://api.covid19api.com/summary\")\r\n      .then((data) => {\r\n        data.json().then((json) => {\r\n          const summaryData = df.getFormattedSummary(json);\r\n          this.state.covidSummaryData = summaryData;\r\n          this.setHeatmapData();\r\n          this.state.apiIsLoading = false;\r\n          this.forceUpdate();\r\n        });\r\n      })\r\n      .catch(() => {\r\n        /* if issues connecting to API, use static data from April 27, 2020 instead */\r\n        this.state.couldNotConnectToApi = true;\r\n        const summaryData = df.getFormattedSummary(staticSummaryData);\r\n        this.state.covidSummaryData = summaryData;\r\n        this.setHeatmapData();\r\n        this.state.apiIsLoading = false;\r\n        this.forceUpdate();\r\n      });\r\n\r\n    this.handleCountryChange = this.handleCountryChange.bind(this);\r\n    this.setHeatmapData = this.setHeatmapData.bind(this);\r\n    this.handleApiLoaded = this.handleApiLoaded.bind(this);\r\n  }\r\n\r\n  /* handleApiLoaded is called when the google maps interface is loaded\r\n     so we can bring the map and maps interfaces into the component */\r\n  handleApiLoaded(map, maps) {\r\n    map.setOptions({ maxZoom: 4 });\r\n    this.map = map;\r\n    this.maps = maps;\r\n  }\r\n\r\n  /* handleCountryChange is passed down into the MapSettings component\r\n     as an event handler for the onChange event, and dispatches an update\r\n     to the heatmap data after the currentCountry is updated in state */\r\n  handleCountryChange(event) {\r\n    this.setState({ currentCountry: event.target.value }, this.setHeatmapData);\r\n  }\r\n\r\n  /* setHeatmapData is called in the component constructor, and everytime\r\n     the currentCountry changes */\r\n  setHeatmapData() {\r\n    // if currentCountry is blank, display worldwide heatmap\r\n    if (this.state.currentCountry === \"\") {\r\n      let heatmapData = df.getWorldHeatmap(this.state.covidSummaryData);\r\n      this.setState((state) => {\r\n        return {\r\n          heatmapData: heatmapData,\r\n          countryDetails: \"\",\r\n        };\r\n      });\r\n    }\r\n\r\n    // otherwise, get the country specific heatmap data and display it\r\n    else {\r\n      const country = this.state.covidSummaryData[this.state.currentCountry][\r\n        \"slug\"\r\n      ];\r\n      this.setState((state) => {\r\n        return {\r\n          apiIsLoading: !state.apiIsLoading,\r\n        };\r\n      });\r\n\r\n      // fetch data from the last 24 hours if able to connect to api\r\n      if (!this.state.couldNotConnectToApi) {\r\n        fetch(\r\n          \"https://api.covid19api.com/country/\" +\r\n            country +\r\n            \"/status/confirmed?from=\" +\r\n            moment().subtract(1, \"days\").format() +\r\n            \"&to=\" +\r\n            moment().format()\r\n        )\r\n          .then((data) => {\r\n            data.json().then((json) => {\r\n              // format data and update state\r\n              let heatmapData = df.getCountryHeatmap(json);\r\n              let countryDetails =\r\n                this.state.currentCountry === \"\" ? (\r\n                  \"\"\r\n                ) : (\r\n                  <CountryDetails\r\n                    data={\r\n                      this.state.covidSummaryData[this.state.currentCountry]\r\n                    }\r\n                  />\r\n                );\r\n              this.setState({\r\n                heatmapData: heatmapData,\r\n                countryDetails: countryDetails,\r\n              });\r\n\r\n              // fit map to zoom into currentCountry based on heatmap data lat lng bounds\r\n              let bounds = getBounds(this.maps, heatmapData);\r\n              this.map.fitBounds(bounds);\r\n              this.setState((state) => {\r\n                return {\r\n                  apiIsLoading: !state.apiIsLoading,\r\n                };\r\n              });\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // catch any issues with API loading\r\n            alert(\"Error loading data, try picking another country...\");\r\n            this.setState((state) => {\r\n              return { apiIsLoading: !state.apiIsLoading };\r\n            });\r\n          });\r\n      }\r\n\r\n      // otherwise, use the static country data\r\n      else {\r\n        let heatmapData = df.getCountryHeatmap(countryData[country]);\r\n        let countryDetails =\r\n          this.state.currentCountry === \"\" ? (\r\n            \"\"\r\n          ) : (\r\n            <CountryDetails\r\n              data={this.state.covidSummaryData[this.state.currentCountry]}\r\n            />\r\n          );\r\n        this.setState({\r\n          heatmapData: heatmapData,\r\n          countryDetails: countryDetails,\r\n        });\r\n\r\n        // fit map to zoom into currentCountry based on heatmap data lat lng bounds\r\n        let bounds = getBounds(this.maps, heatmapData);\r\n        this.map.fitBounds(bounds);\r\n        this.setState((state) => {\r\n          return {\r\n            apiIsLoading: !state.apiIsLoading,\r\n          };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // wait for api call in constructor to finish fetching generic summary data\r\n    if (!this.state.covidSummaryData) {\r\n      return <div>Loading</div>;\r\n    }\r\n\r\n    // initial call is done, load the app\r\n    else {\r\n      let disclaimer = this.state.couldNotConnectToApi ? (\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            zIndex: 1,\r\n            color: \"white\",\r\n            margin: \"5px\",\r\n          }}\r\n        >\r\n          Could not connect to covid19api. You are viewing the app with data\r\n          from select countries on 27 April 2020.\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      );\r\n      return (\r\n        /* LoadingOverlay is a package used to display a spinner while\r\n           waiting for the api to respond with country-specific data */\r\n        <LoadingOverlay\r\n          active={this.state.apiIsLoading}\r\n          text=\"Loading data...\"\r\n          spinner={true}\r\n          styles={{\r\n            wrapper: {\r\n              height: \"100vh\",\r\n              width: \"100vw\",\r\n            },\r\n          }}\r\n        >\r\n          <MapSettings\r\n            countries={this.state.covidSummaryData}\r\n            currentCountry={this.state.currentCountry}\r\n            handleCountryChange={this.handleCountryChange}\r\n          />\r\n          <GoogleMap\r\n            style={{\r\n              margin: \"0\",\r\n              padding: \"0\",\r\n            }}\r\n            heatmapLibrary={true}\r\n            heatmap={{\r\n              ...this.state.heatmapData,\r\n              ...this.heatmapOptions,\r\n            }}\r\n            yesIWantToUseGoogleMapApiInternals={true}\r\n            onGoogleApiLoaded={({ map, maps }) => {\r\n              this.handleApiLoaded(map, maps);\r\n            }}\r\n            defaultCenter={{ lat: 0, lng: 0 }}\r\n            defaultZoom={0}\r\n          ></GoogleMap>\r\n          {this.state.countryDetails}\r\n          {disclaimer}\r\n        </LoadingOverlay>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"../styles/App.css\";\r\nimport Map from \"./Map.js\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}