{"version":3,"sources":["styles/MapSettingsStyle.js","components/MapSettings.js","styles/CountryDetailsStyle.js","components/CountryDetails.js","utilities/reducers.js","components/Map.js","utilities/dataFormatters.js","components/App.js","serviceWorker.js","index.js"],"names":["mapSettingsStyle","zIndex","position","margin","marginTop","MapSettings","value","this","props","currentCountry","onChange","handleCountryChange","style","Object","keys","countries","map","countryCode","key","React","Component","countryDetailsStyle","width","backgroundColor","opacity","borderRadius","padding","top","left","CountryDetails","data","name","totalConfirmed","totalDeaths","totalRecovered","dataReducer","obj","slug","centroidReducer","centroid","lat","lng","Map","state","covidCountryData","heatmapData","countryDetails","center","zoom","maps","heatmapOptions","options","dissipating","radius","fetch","then","json","countryData","centroids","centroidJson","reduce","reducers","formattedData","df","setHeatmapData","bind","onApiLoad","setState","event","target","positions","push","code","weight","forceUpdate","country","moment","subtract","format","forEach","dataPoint","bounds","LatLngBounds","i","length","extend","LatLng","fitBounds","height","heatmapLibrary","heatmap","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","setOptions","maxZoom","handleApiLoaded","defaultCenter","defaultZoom","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37431e0f.chunk.js","sourcesContent":["const mapSettingsStyle = {\r\n  zIndex: 1,\r\n  position: \"relative\",\r\n  margin: \"auto\",\r\n  marginTop: \"20px\",\r\n};\r\n\r\nexport { mapSettingsStyle };\r\n","import React from \"react\";\r\nimport { mapSettingsStyle } from \"../styles/MapSettingsStyle.js\";\r\n\r\nclass MapSettings extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <select\r\n          value={this.props.currentCountry}\r\n          onChange={this.props.handleCountryChange}\r\n          style={mapSettingsStyle}\r\n        >\r\n          <option value=\"\">- Select a Country -</option>\r\n          {Object.keys(this.props.countries).map((countryCode) => {\r\n            return (\r\n              <option value={countryCode} key={countryCode}>\r\n                {this.props.countries[countryCode][\"name\"]}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapSettings;\r\n","const countryDetailsStyle = {\r\n  width: \"300px\",\r\n  backgroundColor: \"gray\",\r\n  opacity: 0.8,\r\n  borderRadius: \"50px\",\r\n  padding: \"10px\",\r\n  position: \"absolute\",\r\n  top: \"40px\",\r\n  left: \"40px\",\r\n};\r\n\r\nexport { countryDetailsStyle };\r\n","import React from \"react\";\r\nimport { countryDetailsStyle } from \"../styles/CountryDetailsStyle\";\r\n\r\nfunction CountryDetails(props) {\r\n  return (\r\n    <div style={countryDetailsStyle}>\r\n      <h4>{props.data.name}</h4>\r\n      <ul>\r\n        <li>Confirmed Cases: {props.data.totalConfirmed}</li>\r\n        <li>Deaths: {props.data.totalDeaths}</li>\r\n        <li>Recoveries: {props.data.totalRecovered}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","const dataReducer = (obj, data) => {\r\n  obj[data[\"CountryCode\"]] = {\r\n    slug: data[\"Slug\"],\r\n    name: data[\"Country\"],\r\n    totalConfirmed: data[\"TotalConfirmed\"],\r\n    totalDeaths: data[\"TotalDeaths\"],\r\n    totalRecovered: data[\"TotalRecovered\"],\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nconst centroidReducer = (obj, centroid) => {\r\n  obj[centroid[\"country\"]] = {\r\n    lat: centroid[\"latitude\"],\r\n    lng: centroid[\"longitude\"],\r\n  };\r\n  return obj;\r\n};\r\n\r\nexport { dataReducer, centroidReducer };\r\n","import React from \"react\";\r\nimport GoogleMap from \"google-map-react\";\r\nimport MapSettings from \"./MapSettings.js\";\r\nimport CountryDetails from \"./CountryDetails.js\";\r\nimport moment from \"moment\";\r\nimport * as df from \"../utilities/dataFormatters\";\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      covidCountryData: null,\r\n      heatmapData: null,\r\n      currentCountry: \"\",\r\n      countryDetails: \"\",\r\n      center: { lat: 0, lng: 0 },\r\n      zoom: 0,\r\n      map: null,\r\n      maps: null,\r\n    };\r\n\r\n    this.heatmapOptions = {\r\n      options: { dissipating: true, radius: 50, opacity: 0.7 },\r\n    };\r\n    fetch(\"https://api.covid19api.com/summary\").then((data) => {\r\n      data.json().then((json) => {\r\n        const countryData = df.getFormattedSummary(json);\r\n        this.state.covidCountryData = countryData;\r\n        this.setHeatmapData();\r\n      });\r\n    });\r\n\r\n    this.handleCountryChange = this.handleCountryChange.bind(this);\r\n    this.setHeatmapData = this.setHeatmapData.bind(this);\r\n    this.onApiLoad = this.onApiLoad.bind(this);\r\n  }\r\n\r\n  onApiLoad(map, maps) {\r\n    this.setState({ map: map, maps: maps });\r\n  }\r\n\r\n  handleCountryChange(event) {\r\n    this.setState({ currentCountry: event.target.value }, this.setHeatmapData);\r\n  }\r\n\r\n  setHeatmapData() {\r\n    if (this.state.currentCountry === \"\") {\r\n      let heatmapData = df.getWorldHeatmap(this.state.covidCountryData);\r\n      this.setState(\r\n        { heatmapData: heatmapData, countryDetails: \"\" },\r\n        this.forceUpdate\r\n      );\r\n    } else {\r\n      const country = this.state.covidCountryData[this.state.currentCountry][\r\n        \"slug\"\r\n      ];\r\n      fetch(\r\n        \"https://api.covid19api.com/country/\" +\r\n          country +\r\n          \"/status/confirmed?from=\" +\r\n          moment().subtract(1, \"days\").format() +\r\n          \"&to=\" +\r\n          moment().format()\r\n      ).then((data) => {\r\n        data.json().then((json) => {\r\n          let heatmapData = df.getCountryHeatmap(json);\r\n          let countryDetails =\r\n            this.state.currentCountry === \"\" ? (\r\n              \"\"\r\n            ) : (\r\n              <CountryDetails\r\n                data={this.state.covidCountryData[this.state.currentCountry]}\r\n              />\r\n            );\r\n          this.setState(\r\n            { heatmapData: heatmapData, countryDetails: countryDetails },\r\n            this.forceUpdate\r\n          );\r\n          let bounds = new this.state.maps.LatLngBounds();\r\n          for (let i = 0; i < heatmapData[\"positions\"].length; i++) {\r\n            bounds.extend(\r\n              new this.state.maps.LatLng(\r\n                heatmapData[\"positions\"][i][\"lat\"],\r\n                heatmapData[\"positions\"][i][\"lng\"]\r\n              )\r\n            );\r\n          }\r\n          this.state.map.fitBounds(bounds);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (\r\n      this.state.covidCountryData === null ||\r\n      this.state.heatmapData === null\r\n    ) {\r\n      return <div>Loading</div>;\r\n    } else {\r\n      const handleApiLoaded = (map, maps) => {\r\n        /*let bounds = new maps.LatLngBounds();\r\n        for (let i = 0; i < this.state.heatmapData[\"positions\"].length; i++) {\r\n          bounds.extend(\r\n            new maps.LatLng(\r\n              this.state.heatmapData[\"positions\"][i][\"lat\"],\r\n              this.state.heatmapData[\"positions\"][i][\"lng\"]\r\n            )\r\n          );\r\n        }\r\n        map.fitBounds(bounds);*/\r\n        map.setOptions({ maxZoom: 4 });\r\n        this.setState({ map: map, maps: maps });\r\n      };\r\n      return (\r\n        <>\r\n          <MapSettings\r\n            countries={this.state.covidCountryData}\r\n            currentCountry={this.state.currentCountry}\r\n            handleCountryChange={this.handleCountryChange}\r\n          />\r\n          <GoogleMap\r\n            style={{ height: \"100vh\", width: \"100vh\" }}\r\n            heatmapLibrary={true}\r\n            heatmap={{\r\n              ...this.state.heatmapData,\r\n              ...this.heatmapOptions,\r\n            }}\r\n            yesIWantToUseGoogleMapApiInternals={true}\r\n            onGoogleApiLoaded={({ map, maps }) => {\r\n              handleApiLoaded(map, maps);\r\n            }}\r\n            defaultCenter={this.state.center}\r\n            defaultZoom={this.state.zoom}\r\n          ></GoogleMap>\r\n          {this.state.countryDetails}\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import * as reducers from \"./reducers\";\r\nimport centroidJson from \"../content/centroids.json\";\r\n\r\nfunction getFormattedSummary(json) {\r\n  const centroids = centroidJson.reduce(reducers.centroidReducer, {});\r\n  let formattedData = json[\"Countries\"].reduce(reducers.dataReducer, {});\r\n  for (var countryCode in formattedData) {\r\n    if (typeof centroids[countryCode] !== \"undefined\") {\r\n      formattedData[countryCode][\"centroid\"] = centroids[countryCode];\r\n    } else {\r\n      delete formattedData[countryCode];\r\n    }\r\n  }\r\n  return formattedData;\r\n}\r\n\r\nfunction getWorldHeatmap(data) {\r\n  let heatmapData = { positions: [] };\r\n  for (let countryCode in data) {\r\n    heatmapData[\"positions\"].push({\r\n      code: countryCode,\r\n      lat: data[countryCode][\"centroid\"][\"lat\"],\r\n      lng: data[countryCode][\"centroid\"][\"lng\"],\r\n      weight: data[countryCode][\"totalConfirmed\"],\r\n    });\r\n  }\r\n  return heatmapData;\r\n}\r\n\r\nfunction getCountryHeatmap(json) {\r\n  let heatmapData = {\r\n    positions: [],\r\n  };\r\n  json.forEach((dataPoint) => {\r\n    if (dataPoint[\"Cases\"] > 0) {\r\n      heatmapData[\"positions\"].push({\r\n        lat: dataPoint[\"Lat\"],\r\n        lng: dataPoint[\"Lon\"],\r\n        weight: dataPoint[\"Cases\"],\r\n      });\r\n    }\r\n  });\r\n  return heatmapData;\r\n}\r\n\r\nexport { getFormattedSummary, getWorldHeatmap, getCountryHeatmap };\r\n","import React from \"react\";\r\nimport \"../styles/App.css\";\r\nimport Map from \"./Map.js\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}